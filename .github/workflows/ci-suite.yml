name: 'CI'

on:
  push:
    branches:
    - dev
    - master
  pull_request:
    branches:
    - dev
    - master
  workflow_dispatch:
  
env:
  TGS_DOTNET_VERSION: 6.0.x
  TGS_TEST_GITHUB_TOKEN: ${{ secrets.LIVE_TESTS_TOKEN }}
  TGS_RELEASE_NOTES_TOKEN: ${{ secrets.DEV_PUSH_TOKEN }}

concurrency:
  group: "ci-${{ github.head_ref || github.run_id }}-${{ github.event_name }}"
  cancel-in-progress: true

jobs:
  security-checkpoint:
    name: Check CI Clearance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id && github.event.pull_request.state == 'open'
    steps:
    - name: Comment on new Fork PR
      if: github.event.action == 'opened' && !contains(github.event.pull_request.labels.*.name, 'CI Cleared')
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: Thank you for contributing to tgstation-server! As this pull request is from a fork, we can't allow the CI actions which require repository secrets to run on it without approval. After a brief review to make sure you're not misusing those secrets, a maintainer will add the `CI Cleared` label to allow the CI suite to run. Maintainers, please note that any changes to workflow files will not be reflected in the CI run.

    - name: "Remove Stale 'CI Cleared' Label"
      if: github.event.action == 'synchronize' || github.event.action == 'reopened'
      uses: actions-ecosystem/action-remove-labels@v1
      with:
        labels: CI Cleared

    - name: Fail Clearance Check if PR has Unlabeled new Commits from Fork
      if: (github.event.action == 'synchronize' || github.event.action == 'reopened') || ((github.event.action == 'opened' || github.event.action == 'labeled') && !contains(github.event.pull_request.labels.*.name, 'CI Cleared'))
      run: exit 1

  start-ci-run-gate:
    name: Start CI Run Gate
    needs: security-checkpoint
    runs-on: ubuntu-latest
    if: "!(cancelled() || failure()) && (needs.security-checkpoint.result == 'success' || (needs.security-checkpoint.result == 'skipped' && (github.event_name == 'push' || github.event_name == 'schedule' || (github.event.pull_request.head.repo.id == github.event.pull_request.base.repo.id && github.event_name != 'pull_request_target'))))"
    steps:
    - name: GitHub Requires at Least One Step for a Job
      run: exit 0

  analyze:
    name: Code Scanning
    needs: start-ci-run-gate
    if: "!(cancelled() || failure()) && needs.start-ci-run-gate.result == 'success'"
    runs-on: ubuntu-latest
    steps:
    - name: Install Node 12.X
      uses: actions/setup-node@v3
      with:
        node-version: 12.x

    - name: Upgrade NPM
      run: npm install -g npm

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'
      with:
        fetch-depth: 2

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        fetch-depth: 2
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dmapi-build:
    name: Build DMAPI
    needs: start-ci-run-gate
    if: "!(cancelled() || failure()) && needs.start-ci-run-gate.result == 'success'"
    env:
      BYOND_MAJOR: 515
      BYOND_MINOR: 1606
    runs-on: ubuntu-latest
    steps:
    - name: Install x86 libc Dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y -o APT::Immediate-Configure=0 libc6-i386 libstdc++6:i386 libgcc-s1:i386

    - name: Restore BYOND cache
      uses: actions/cache@v3
      id: cache-byond
      with:
        path: $HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}
        key: ${{ env.BYOND_MAJOR }}-${{ env.BYOND_MINOR }}-dmapibyond

    - name: Install BYOND
      if: steps.cache-byond.outputs.cache-hit != 'true'
      run: |
        echo "Setting up BYOND."
        mkdir -p "$HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}"
        cd "$HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}"
        curl "http://www.byond.com/download/build/${{ env.BYOND_MAJOR }}/${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}_byond_linux.zip" -o byond.zip
        unzip byond.zip
        cd byond
        make here
        exit 0

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Build DMAPI Test Project
      run: |
        set -e
        retval=1
        source $HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}/byond/bin/byondsetup

        if hash DreamMaker 2>/dev/null
        then
          DreamMaker tests/DMAPI/BasicOperation/basic_operation_test.dme 2>&1 | tee result.log
          retval=$?
          if ! grep '\- 0 errors, 0 warnings' result.log
          then
            retval=1
          fi
        else
          echo "Couldn't find the DreamMaker executable, aborting."
          retval=2
        fi
        exit $retval

  dox-build:
    name: Build Doxygen Site
    runs-on: ubuntu-latest
    needs: start-ci-run-gate
    if: "!(cancelled() || failure()) && needs.start-ci-run-gate.result == 'success'"
    steps:
    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Patch Doxyfile
      run: |
        VERSION=$(cat "build/Version.props" | grep -oPm1 "(?<=<TgsCoreVersion>)[^<]+")
        echo -e "\nPROJECT_NUMBER = $VERSION\nINPUT = .\nOUTPUT_DIRECTORY = ./doxout\nPROJECT_LOGO = ./build/tgs.ico\nHAVE_DOT=YES" >> "docs/Doxyfile"

    - name: Doxygen Build
      uses: mattnotmitt/doxygen-action@v1
      with:
        doxyfile-path: 'docs/Doxyfile'

    - name: gh-pages push
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/dev'
      run: |
        git clone -b gh-pages --single-branch "https://git@github.com/tgstation/tgstation-server" $HOME/tgsdox
        pushd $HOME/tgsdox
        rm -r *
        popd
        echo ./doxout/* | xargs -n 10 sudo mv -t $HOME/tgsdox
        cd $HOME/tgsdox
        git config --global push.default simple
        git config user.name "tgstation-server"
        git config user.email "tgstation-server@tgstation13.org"
        echo '# THIS BRANCH IS AUTO GENERATED BY GITHUB ACTIONS' > README.md

        # Need to create a .nojekyll file to allow filenames starting with an underscore
        # to be seen on the gh-pages site. Therefore creating an empty .nojekyll file.
        echo "" > .nojekyll
        echo "Adding files..."
        git add --all
        echo "Committing..."
        git diff-index --quiet HEAD || git commit -m "Deploy code docs to GitHub Pages for workflow run ${{ github.run_number }}" -m "Commit: ${{ github.event.head_commit.id }}"
        echo "Pushing..."
        git push -f "https://${{ secrets.DEV_PUSH_TOKEN }}@github.com/tgstation/tgstation-server" 2>&1

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: start-ci-run-gate
    if: "!(cancelled() || failure()) && needs.start-ci-run-gate.result == 'success'"
    steps:
    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Build Docker Image
      run: docker build . -f build/Dockerfile

  windows-unit-tests:
    name: Windows Tests
    needs: start-ci-run-gate
    if: "!(cancelled() || failure()) && needs.start-ci-run-gate.result == 'success'"
    strategy:
      fail-fast: false
      matrix:
        configuration: [ 'Debug', 'Release' ]
    env:
      TGS_TEST_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
      TGS_TEST_IRC_CONNECTION_STRING: ${{ secrets.IRC_CONNECTION_STRING }}
    runs-on: windows-latest
    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.TGS_DOTNET_VERSION }}

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Upgrade NPM
      run: npm install -g npm

    - name: Build
      run: dotnet build -c ${{ matrix.configuration }}

    - name: Run Unit Tests
      run: dotnet test --no-build --logger GitHubActions --filter FullyQualifiedName!~TestLiveServer -c ${{ matrix.configuration }} --collect:"XPlat Code Coverage" --settings build/coverlet.runsettings --results-directory ./TestResults tgstation-server.sln

    - name: Store Code Coverage
      uses: actions/upload-artifact@v3
      with:
        name: windows-unit-test-coverage-${{ matrix.configuration }}
        path: ./TestResults/

  windows-integration-test:
    name: Windows Live Tests
    needs: dmapi-build
    if: "!(cancelled() || failure()) && needs.dmapi-build.result == 'success'"
    strategy:
      fail-fast: false
      matrix:
        database-type: [ 'SqlServer', 'Sqlite', 'PostgresSql', 'MariaDB', 'MySql' ]
        watchdog-type: [ 'Basic', 'System' ]
        configuration: [ 'Debug', 'Release' ]
    runs-on: windows-2019
    env:
      BYOND_MAJOR: 514
      BYOND_MINOR: 1588
    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.TGS_DOTNET_VERSION }}

    - name: Restore BYOND cache
      uses: actions/cache@v3
      id: cache-byond
      with:
        path: $HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}
        key: ${{ env.BYOND_MAJOR }}-${{ env.BYOND_MINOR }}-livebyond

    - name: Download BYOND
      if: steps.cache-byond.outputs.cache-hit != 'true'
      run: |
        echo "Downloading BYOND..."
        mkdir -p "$HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}"
        cd "$HOME/BYOND-${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}"
        curl "http://www.byond.com/download/build/${{ env.BYOND_MAJOR }}/${{ env.BYOND_MAJOR }}.${{ env.BYOND_MINOR }}_byond.zip" -o byond.zip

    - name: Upgrade NPM
      run: npm install -g npm

    - name: Set TGS_TEST_DUMP_API_SPEC
      if: ${{ matrix.configuration == 'Release' && matrix.watchdog-type == 'System' && matrix.database-type == 'SqlServer' }}
      run: echo "TGS_TEST_DUMP_API_SPEC=yes" >> $Env:GITHUB_ENV

    - name: Set General__UseBasicWatchdog
      if: ${{ matrix.watchdog-type == 'Basic' }}
      run: echo "General__UseBasicWatchdog=true" >> $Env:GITHUB_ENV

    - name: Set Sqlite Connection Info
      if: ${{ matrix.database-type == 'Sqlite' }}
      shell: bash
      run: |
        echo "TGS_TEST_DATABASE_TYPE=Sqlite" >> $GITHUB_ENV
        echo "TGS_TEST_CONNECTION_STRING=Data Source=TGS_${{ matrix.watchdog-type }}_${{ matrix.configuration }}.sqlite3;Mode=ReadWriteCreate" >> $GITHUB_ENV

    - name: Setup Postgres
      uses: ankane/setup-postgres@v1
      if: ${{ matrix.database-type == 'PostgresSql' }}

    - name: Set PostgresSql Connection Info
      if: ${{ matrix.database-type == 'PostgresSql' }}
      shell: bash
      run: |
        echo "TGS_TEST_DATABASE_TYPE=PostgresSql" >> $GITHUB_ENV
        echo "TGS_TEST_CONNECTION_STRING=Application Name=tgstation-server;Host=127.0.0.1;Username=$USER;Database=TGS__${{ matrix.watchdog-type }}_${{ matrix.configuration }}" >> $GITHUB_ENV

    - name: Setup MariaDB
      uses: ankane/setup-mariadb@v1
      if: ${{ matrix.database-type == 'MariaDB' }}

    - name: Set MariaDB Connection Info
      if: ${{ matrix.database-type == 'MariaDB' }}
      shell: bash
      run: |
        echo "TGS_TEST_DATABASE_TYPE=MariaDB" >> $GITHUB_ENV
        echo "TGS_TEST_CONNECTION_STRING=Server=127.0.0.1;uid=root;database=tgs__${{ matrix.watchdog-type }}_${{ matrix.configuration }}" >> $GITHUB_ENV

    - name: Setup MySQL
      uses: ankane/setup-mysql@v1
      if: ${{ matrix.database-type == 'MySql' }}

    - name: Set MySQL Connection Info
      if: ${{ matrix.database-type == 'MySql' }}
      shell: bash
      run: |
        echo "TGS_TEST_DATABASE_TYPE=MySql" >> $GITHUB_ENV
        echo "TGS_TEST_CONNECTION_STRING=Server=127.0.0.1;uid=root;database=tgs__${{ matrix.watchdog-type }}_${{ matrix.configuration }}" >> $GITHUB_ENV

    - name: Set SqlServer Connection Info
      if: ${{ matrix.database-type == 'SqlServer' }}
      shell: bash
      run: |
        TGS_CONNSTRING_VALUE="Server=(localdb)\MSSQLLocalDB;Integrated Security=true;Initial Catalog=TGS_${{ matrix.watchdog-type }}_${{ matrix.configuration }};Application Name=tgstation-server"
        echo "TGS_TEST_CONNECTION_STRING=$(echo $TGS_CONNSTRING_VALUE)" >> $GITHUB_ENV
        echo "TGS_TEST_DATABASE_TYPE=SqlServer" >> $GITHUB_ENV

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Build
      run: dotnet build -c ${{ matrix.configuration }} tests/Tgstation.Server.Tests/Tgstation.Server.Tests.csproj

    - name: Run Live Tests
      run: |
        cd tests/Tgstation.Server.Tests
        Start-Sleep -Seconds 10
        dotnet test -c ${{ matrix.configuration }} --no-build --filter FullyQualifiedName~TestLiveServer --logger GitHubActions --collect:"XPlat Code Coverage" --settings ../../build/coverlet.runsettings --results-directory ../../TestResults

    - name: Store Code Coverage
      uses: actions/upload-artifact@v3
      with:
        name: windows-integration-test-coverage-${{ matrix.configuration }}-${{ matrix.watchdog-type }}-${{ matrix.database-type }}
        path: ./TestResults/

    - name: Store OpenAPI Spec
      if: ${{ matrix.configuration == 'Release' && matrix.watchdog-type == 'System' && matrix.database-type == 'SqlServer' }}
      uses: actions/upload-artifact@v3
      with:
        name: openapi-spec
        path: C:/swagger.json

    - name: Package Server Service
      if: ${{ matrix.configuration == 'Release' && matrix.watchdog-type == 'Basic' }}
      run: |
        cd src/Tgstation.Server.Host.Service
        dotnet publish -c ${{ matrix.configuration }} -o ../../Artifacts/Service
        cd ../Tgstation.Server.Host
        dotnet publish -c ${{ matrix.configuration }} --no-build -o ../../Artifacts/Service/lib/Default
        mv ../../Artifacts/Service/lib/Default/appsettings.yml ../../Artifacts/Service/appsettings.yml
        rm ../../Artifacts/Service/lib/Default/Tgstation.Server.Host.exe

    - name: Store Server Service
      if: ${{ matrix.configuration == 'Release' && matrix.watchdog-type == 'Basic' }}
      uses: actions/upload-artifact@v3
      with:
        name: ServerService
        path: Artifacts/Service/

  validate-openapi-spec:
    name: OpenAPI Spec Validation
    needs: windows-integration-test
    if: "!(cancelled() || failure()) && needs.windows-integration-test.result == 'success'"
    runs-on: ubuntu-latest
    steps:
    - name: Install Node 12.X
      uses: actions/setup-node@v3
      with:
        node-version: 12.x

    - name: Install IBM OpenAPI Validator
      run: npm i -g ibm-openapi-validator@0.51.3

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Retrieve OpenAPI Spec
      uses: actions/download-artifact@v3
      with:
        name: openapi-spec
        path: ./swagger

    - name: Lint OpenAPI Spec
      run: npx lint-openapi -v -p -c build/OpenApiValidationSettings.json ./swagger/swagger.json

  ensure-release:
    name: Ensure TGS Release is Latest GitHub Release
    needs: [deploy-dm, deploy-http]
    runs-on: ubuntu-latest
    if: "!(cancelled() || failure()) && github.event_name != 'schedule' && (needs.deploy-dm.result == 'success' || needs.deploy-http.result == 'success') && !contains(github.event.head_commit.message, '[TGSDeploy]')"
    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.TGS_DOTNET_VERSION }}

    - name: Checkout
      uses: actions/checkout@v3

    - name: Run ReleaseNotes with --ensure-release
      run: dotnet run -c Release --project tools/ReleaseNotes --ensure-release

